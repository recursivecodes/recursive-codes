name: recursive-codes
on:
  push:
    branches:
      - 'master'
jobs:
  build-job:
    name: Build Job
    runs-on: ubuntu-latest
    steps:

      - name: 'Start build job'
        run: |
          echo "Starting the build job."

      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Java 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: 'Check Java Version'
        run: |
          java -version

      - name: 'Build WAR'
        run: |
          ./gradlew -Dgrails.env=prod war

      - name: 'Get Version Number'
        run: |
          echo "::set-env name=VERSION::$(./gradlew properties -q | grep "version:" | awk '{print $2}')"

      - name: 'Publish WAR'
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'recursive-codes-${{env.VERSION}}-all.jar'
          path: build/libs/recursive-codes-*.war
      - name: 'Write Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/id_vm.pub
          sudo mkdir /wallet
          sudo sh -c  'echo "${{secrets.WALLET_CWALLET}}" | base64 -d >> /wallet/cwallet.sso'
          sudo sh -c  'echo "${{secrets.WALLET_EWALLET}}" | base64 -d >> /wallet/ewallet.p12'
          sudo sh -c  'echo "${{secrets.WALLET_KEYSTORE}}" | base64 -d >> /wallet/keystore.jks'
          sudo sh -c  'echo "${{secrets.WALLET_OJDBC}}" | base64 -d >> /wallet/ojdbc.properties'
          sudo sh -c  'echo "${{secrets.WALLET_SQLNET}}" | base64 -d >> /wallet/sqlnet.ora'
          sudo sh -c  'echo "${{secrets.WALLET_TNSNAMES}}" | base64 -d >> /wallet/tnsnames.ora'
          sudo sh -c  'echo "${{secrets.WALLET_TRUSTSTORE}}" | base64 -d >> /wallet/truststore.jks'


      - name: 'Run Migrations'
        run: |
          ./gradlew \
              -Dgrails.env=prod \
              -DDB_URL='${{secrets.DB_URL}}' \
              -DSERVER_URL='${{secrets.SERVER_URL}}' \
              -DDB_USERNAME='${{secrets.DB_USERNAME}}' \
              -DDB_PASSWORD='${{secrets.DB_PASSWORD}}' \
              -DACCESS_KEY='${{secrets.ACCESS_KEY}}' \
              -DSECRET_KEY='${{secrets.SECRET_KEY}}' \
              -DS3_BUCKET='${{secrets.S3_BUCKET}}' \
              -DSMTP_HOST='${{secrets.SMTP_HOST}}' \
              -DSMTP_PORT='${{secrets.SMTP_PORT}}' \
              -DSMTP_USERNAME='${{secrets.SMTP_USERNAME}}' \
              -DSMTP_PASSWORD='${{secrets.SMTP_PASSWORD}}' \
              -DOCI_CONFIG_PATH='${{secrets.OCI_CONFIG_PATH}}' \
              -DGITHUB_USER_1='${{secrets.GH_USER_1}}' \
              -DGITHUB_USER_2='${{secrets.GH_USER_2}}' \
              -DGITHUB_PASSWORD='${{secrets.GH_PASSWORD}}' \
              -DEMAIL_FROM='${{secrets.EMAIL_FROM}}' \
              -DYOUTUBE_FEED_URL='${{secrets.YOUTUBE_FEED_URL}}' \
              -DYOUTUBE_CHANNEL_URL='${{secrets.YOUTUBE_CHANNEL_URL}}' \
              -DYOUTUBE_CHANNEL_ID='${{secrets.YOUTUBE_CHANNEL_ID}}' \
              -DYOUTUBE_API_KEY='${{secrets.YOUTUBE_API_KEY}}' \
              -DOBJECT_STORAGE_REGION='${{secrets.OBJECT_STORAGE_REGION}}' \
              -DOBJECT_STORAGE_IMG_BUCKET='${{secrets.OBJECT_STORAGE_IMG_BUCKET}}' \
              -DOBJECT_STORAGE_NAMESPACE='${{secrets.OBJECT_STORAGE_NAMESPACE}}' \
              -DOBJECT_STORAGE_ENDPOINT='${{secrets.OBJECT_STORAGE_ENDPOINT}}' \
              -DIMPORT_FEED_URL='${{secrets.IMPORT_FEED_URL}}' \
              -DIMPORT_USERNAME='${{secrets.IMPORT_USERNAME}}' \
              -DIMPORT_API_KEY='${{secrets.IMPORT_API_KEY}}' \
              -DSEQUENCE_POST='${{secrets.SEQUENCE_POST}}' \
              -DSEQUENCE_POST_TAG='${{secrets.SEQUENCE_POST_TAG}}' \
              -DSEQUENCE_TAG='${{secrets.SEQUENCE_TAG}}' \
              -DSEQUENCE_ROLE='${{secrets.SEQUENCE_ROLE}}' \
              -DSEQUENCE_USER='${{secrets.SEQUENCE_USER}}' \
              -DSEQUENCE_USER_ROLE='${{secrets.SEQUENCE_USER_ROLE}}' \
              -DSEQUENCE_SITEMAP='${{secrets.SEQUENCE_SITEMAP}}' \
              -DSEQUENCE_SUBSCRIBER='${{secrets.SEQUENCE_SUBSCRIBER}}' \
              -Doracle.jdbc.fanEnabled='false' \
              --stacktrace \
              dbmUpdate

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL

      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: 'Set Instance IP'
        run: |
          echo "::set-env name=INSTANCE_IP::150.136.137.200"

      - name: 'Write ENV File'
        run: |
          sudo mv /u01/tomcat/latest/bin/setenv.sh /u01/tomcat/latest/bin/setenv.old.sh
          echo 'CATALINA_OPTS="${CATALINA_OPTS} -Doracle.jdbc.fanEnabled=false"' >> /u01/tomcat/latest/bin/setenv.sh
          echo 'CATALINA_OPTS="${CATALINA_OPTS} -DDB_URL=${{secrets.DB_URL}}"' >> /u01/tomcat/latest/bin/setenv.sh
          echo 'CATALINA_OPTS="${CATALINA_OPTS} -DDB_USERNAME=${{secrets.DB_USERNAME}}"' >> /u01/tomcat/latest/bin/setenv.sh
          echo 'CATALINA_OPTS="${CATALINA_OPTS} -DDB_PASSWORD=${{secrets.DB_PASSWORD}}"' >> /u01/tomcat/latest/bin/setenv.sh

      - name: 'Publish Presentation JSON'
        run: |
          oci os object put --bucket-name ${{secrets.S3_BUCKET}} --file /home/runner/work/recursive-codes/recursive-codes/grails-app/conf/presentations.json

      - name: 'Push WAR'
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "build/libs/recursive-codes-${{env.VERSION}}.war"
          target: ""
          strip_components: 2

      - name: 'Write Wallet & OCI Config To VM'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir /.oci
            sudo sh -c 'echo "[DEFAULT]" >> /.oci/config'
            sudo sh -c 'echo "user=${{secrets.OCI_USER_OCID}}" >> /.oci/config'
            sudo sh -c 'echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> /.oci/config'
            sudo sh -c 'echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >> /.oci/config'
            sudo sh -c 'echo "region=${{secrets.OCI_REGION}}" >> /.oci/config'
            sudo sh -c 'echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> /.oci/config'
            sudo sh -c 'echo "key_file=/.oci/key.pem" >> /.oci/config'
            sudo sh -c 'echo "${{secrets.OCI_KEY_FILE}}" >> /.oci/key.pem'
            sudo sh -c 'echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/id_vm.pub'
            sudo mkdir /wallet
            sudo sh -c 'echo "${{secrets.WALLET_CWALLET}}" | base64 -d >> /wallet/cwallet.sso'
            sudo sh -c 'echo "${{secrets.WALLET_EWALLET}}" | base64 -d >> /wallet/ewallet.p12'
            sudo sh -c 'echo "${{secrets.WALLET_KEYSTORE}}" | base64 -d >> /wallet/keystore.jks'
            sudo sh -c 'echo "${{secrets.WALLET_OJDBC}}" | base64 -d >> /wallet/ojdbc.properties'
            sudo sh -c 'echo "${{secrets.WALLET_SQLNET}}" | base64 -d >> /wallet/sqlnet.ora'
            sudo sh -c 'echo "${{secrets.WALLET_TNSNAMES}}" | base64 -d >> /wallet/tnsnames.ora'
            sudo sh -c 'echo "${{secrets.WALLET_TRUSTSTORE}}" | base64 -d >> /wallet/truststore.jks'

      - name: 'Restart Tomcat'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            sudo mv ~/recursive-codes-${{env.VERSION}}.war /u01/tomcat/latest/webapps/ROOT.war
            sudo systemctl restart tomcat
